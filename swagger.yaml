openapi: 3.0.0
info:
  title: Quiz Website API
  version: 1.0.0
  description: API for a quiz website built with Express and MongoDB

servers:
  - url: ilm-hub-an-online-exam-platform-server.vercel.app
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/users/register:
    post:
      summary: Register a new user
      description: Register a new user with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address.
                password:
                  type: string
                  description: User's password.
              required:
                - email
                - password
      responses:
        '200':
          description: User created successfully
        '500':
          description: Server error

  /api/users/login:
    post:
      summary: Login a user
      description: Authenticate a user with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address.
                password:
                  type: string
                  description: User's password.
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
        '500':
          description: Server error

  /api/users/get-user-info:
    post:
      summary: Get user information
      description: Retrieve user information using the user ID.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to retrieve.
              required:
                - userId
      responses:
        '200':
          description: User info fetched successfully
        '500':
          description: Server error

  /api/exams/add:
    post:
      summary: Add a new exam
      description: Add a new exam with a name.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the exam.
              required:
                - name
      responses:
        '200':
          description: Exam added successfully
        '500':
          description: Server error

  /api/exams/get-all-exams:
    post:
      summary: Get all exams
      description: Retrieve all exams.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Exams fetched successfully
        '500':
          description: Server error

  /api/exams/get-exam-by-id:
    post:
      summary: Get exam by ID
      description: Retrieve a specific exam by its ID.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                examId:
                  type: string
                  description: ID of the exam to retrieve.
              required:
                - examId
      responses:
        '200':
          description: Exam fetched successfully
        '500':
          description: Server error

  /api/exams/edit-exam-by-id:
    post:
      summary: Edit exam by ID
      description: Edit an existing exam by its ID.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                examId:
                  type: string
                  description: ID of the exam to edit.
              required:
                - examId
      responses:
        '200':
          description: Exam edited successfully
        '500':
          description: Server error

  /api/exams/delete-exam-by-id:
    post:
      summary: Delete exam by ID
      description: Delete an exam by its ID.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                examId:
                  type: string
                  description: ID of the exam to delete.
              required:
                - examId
      responses:
        '200':
          description: Exam deleted successfully
        '500':
          description: Server error

  /api/exams/add-question-to-exam:
    post:
      summary: Add question to exam
      description: Add a question to an existing exam.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exam:
                  type: string
                  description: ID of the exam to add the question to.
              required:
                - exam
      responses:
        '200':
          description: Question added successfully
        '500':
          description: Server error

  /api/exams/edit-question-in-exam:
    post:
      summary: Edit question in exam
      description: Edit a question within an exam.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questionId:
                  type: string
                  description: ID of the question to edit.
              required:
                - questionId
      responses:
        '200':
          description: Question edited successfully
        '500':
          description: Server error

  /api/exams/delete-question-in-exam:
    post:
      summary: Delete question in exam
      description: Delete a question from an exam.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questionId:
                  type: string
                  description: ID of the question to delete.
                examId:
                  type: string
                  description: ID of the exam from which to delete the question.
              required:
                - questionId
                - examId
      responses:
        '200':
          description: Question deleted successfully
        '500':
          description: Server error

  /api/reports/add-report:
    post:
      summary: Add a new report
      description: Add a new report (attempt).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Attempt added successfully
        '500':
          description: Server error

  /api/reports/get-all-reports:
    post:
      summary: Get all reports
      description: Retrieve all reports, optionally filtered by exam name and user name.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                examName:
                  type: string
                  description: Name of the exam to filter reports.
                userName:
                  type: string
                  description: Name of the user to filter reports.
      responses:
        '200':
          description: Attempts fetched successfully
        '500':
          description: Server error

  /api/reports/get-all-reports-by-user:
    post:
      summary: Get all reports by user
      description: Retrieve all reports for a specific user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to retrieve reports for.
              required:
                - userId
      responses:
        '200':
          description: Attempts fetched successfully
        '500':
          description: Server error 